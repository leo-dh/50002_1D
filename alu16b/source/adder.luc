module adder (
    input a[16],
    input b[16],
    input alufn[6],
    
    output add[16],
    output z,
    output v,
    output n
  ) {
  
  sig sum[17]; // Required since adding two 16bit nums will result in a 17bit 
  sig xb[16];
  
  
  always {
    
    
    case (alufn[1:0]){
    
      b00: // Addition
        sum = a + b;
        xb = b;
      
      b01: // Subtract
        sum = a - b;
        xb = ~b + 1; // Two's Complement Negation of b
      
      b10: // Multiply
        sum = $signed(a[7:0]) * $signed(b[7:0]);
        xb = b;
              
      default:
        sum = a - b;
        xb = ~b + 1;
      
    }
    add = sum[15:0]; // Ignores the 17th bit from the addition
    z = ~|sum; // Check if all outputs are 0
    n = sum[15]; // Check if sum is negative
    v = ( ((a[15])&(xb[15])&(~sum[15])) | ((~a[15])&(~xb[15])&(sum[15])) ); // Check for overflow

  }
}
