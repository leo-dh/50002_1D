module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,    // AVR RX buffer full
    input buttona,
    input buttonb,
    input buttonc,
    input buttonadd,
    input buttonsub,
    input buttonmul,
    input buttondiv,
    
    output operator1[4],
    output operator2[4],
    
    output sevenseg_a[7],
    output sevenseg_b[7],
    output sevenseg_c[7],
    output sevenseg_d[7],
    output equalled,
    output motherled[8],
    output billyled[7]
  ) {
  
  sig rst;
  sig gameend;                  // reset signal

  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_cond button_cond;
    
    dff counter[28];
    dff timer[28];   
    .rst(rst){
      fsm state = {IDLE, SIMPLEMODE, HARDMODE, TESTSIMPLE, TESTHARD};
      simplemode simplemode;
      hardmode hardmode;   
      testsimple testsimple; 
      testhard testhard; 
    }
  }
  seven_seg seven_seg_a;
  seven_seg seven_seg_b;
  seven_seg seven_seg_c;
  seven_seg seven_seg_d;
  operatorled operator1led;
  operatorled operator2led;
  
  motherposled motherposled;
  billyposled billyposled;
  alu alu;
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    operator1led.opcode = 6b111111;
    operator2led.opcode = 6b111111;
    
    operator1 = operator1led.led;
    operator2 = operator2led.led;
    equalled = 0;
    
    gameend = 0;
    
    seven_seg_a.char = d20;
    seven_seg_b.char = d20;
    seven_seg_c.char = d20;
    seven_seg_d.char = d20;
    sevenseg_a = seven_seg_a.seg;
    sevenseg_b = seven_seg_b.seg;
    sevenseg_c = seven_seg_c.seg;
    sevenseg_d = seven_seg_d.seg;
    
    motherposled.position = d9;
    billyposled.position = d0;

    button_cond.buttona = buttona;
    button_cond.buttonb = buttonb;
    button_cond.buttonc = buttonc;
    button_cond.buttonadd = buttonadd;
    button_cond.buttonsub = buttonsub;
    button_cond.buttonmul = buttonmul;
    button_cond.buttondiv = buttondiv;
    
    motherled = motherposled.led;
    billyled = billyposled.led;
    
    simplemode.buttona = 0;
    simplemode.buttonadd = 0;
    simplemode.buttonsub = 0;
    simplemode.buttonmul = 0;
    simplemode.buttondiv = 0;
    simplemode.aluout = 0;
    
    hardmode.buttona = 0;
    hardmode.buttonb = 0;
    hardmode.buttonc = 0;
    hardmode.buttonadd = 0;
    hardmode.buttonsub = 0;
    hardmode.buttondiv = 0;
    hardmode.buttonmul = 0;
    hardmode.aluout = 0;
    
    testsimple.buttona = 0;
    testsimple.buttonb = 0;
    testsimple.buttonc = 0;
    testsimple.buttonadd = 0;
    testsimple.buttonsub = 0;
    testsimple.buttonmul = 0;
    testsimple.buttondiv = 0;
    testsimple.aluout = 0;
    
    testhard.buttona = 0;
    testhard.buttonb = 0;
    testhard.buttonc = 0;
    testhard.buttonadd = 0;
    testhard.buttonsub = 0;
    testhard.buttonmul = 0;
    testhard.buttondiv = 0;
    testhard.aluout = 0;
    
    counter.d = counter.q;
    timer.d = timer.q + 1;
    
    alu.a = d0;
    alu.b = d0;
    alu.alufn = 6b000000;
    
    
    case (state.q){
      state.IDLE:
        if (timer.q == d100000000){
          counter.d = counter.q + 1;
          timer.d = 0;
        }
        if (counter.q == d10){
          counter.d = 0;
        } 
       
        seven_seg_a.char = counter.q;
        seven_seg_b.char = counter.q;
        seven_seg_c.char = counter.q;
        seven_seg_d.char = counter.q;

        simplemode.buttona = button_cond.buttonaout;
        hardmode.buttonc = button_cond.buttoncout;
        testsimple.buttonadd = button_cond.buttonaddout;
        testhard.buttondiv = button_cond.buttondivout;
        if (button_cond.buttonaout == 1){
          state.d = state.SIMPLEMODE;
        }
        if (button_cond.buttoncout == 1){
          state.d = state.HARDMODE;
        }
        if (button_cond.buttonaddout == 1){
          state.d = state.TESTSIMPLE;
        }
        if (button_cond.buttondivout == 1){
          state.d = state.TESTHARD;
        }
        
      state.SIMPLEMODE:
        simplemode.buttona = button_cond.buttonaout;
        simplemode.buttonadd = button_cond.buttonaddout;
        simplemode.buttonsub = button_cond.buttonsubout;
        simplemode.buttonmul = button_cond.buttonmulout;
        simplemode.buttondiv = button_cond.buttondivout;
        simplemode.aluout = alu.s;
        alu.a = simplemode.alua;
        alu.b = simplemode.alub;
        alu.alufn = simplemode.alualufn;
        
        gameend = simplemode.gameend;
        motherposled.position = simplemode.motherpos;
        billyposled.position = simplemode.billypos;
        seven_seg_a.char = simplemode.a_out;
        seven_seg_b.char = simplemode.b_out;
        seven_seg_c.char = simplemode.c_out;
        seven_seg_d.char = simplemode.d_out;
        
        operator1led.opcode = simplemode.operator_sig;
        equalled = 1;      
        if (gameend == 1){
          state.d = state.IDLE;
        }
        
      state.HARDMODE:
        hardmode.buttona = button_cond.buttonaout;
        hardmode.buttonb = button_cond.buttonbout;
        hardmode.buttonc = button_cond.buttoncout;
        hardmode.buttonadd = button_cond.buttonaddout;
        hardmode.buttonsub = button_cond.buttonsubout;
        hardmode.buttondiv = button_cond.buttondivout;
        hardmode.buttonmul = button_cond.buttonmulout;
        hardmode.aluout = alu.s;
        alu.a = hardmode.alua;
        alu.b = hardmode.alub;
        alu.alufn = hardmode.alualufn;
        
        gameend = hardmode.gameend;
        motherposled.position = hardmode.motherpos;
        billyposled.position = hardmode.billypos;
        seven_seg_a.char = hardmode.a_out;
        seven_seg_b.char = hardmode.b_out;
        seven_seg_c.char = hardmode.c_out;
        seven_seg_d.char = hardmode.d_out;
        operator1led.opcode = hardmode.operator1_out;
        operator2led.opcode = hardmode.operator2_out;
        equalled = 1;
                
        if (gameend == 1){
          state.d = state.IDLE;
        }
        
      state.TESTSIMPLE:
        testsimple.buttona = button_cond.buttonaout;
        testsimple.buttonb = button_cond.buttonbout;
        testsimple.buttonc = button_cond.buttoncout;
        testsimple.buttonadd = button_cond.buttonaddout;
        testsimple.buttonsub = button_cond.buttonsubout;
        testsimple.buttonmul = button_cond.buttonmulout;
        testsimple.buttondiv = button_cond.buttondivout;
        testsimple.aluout = alu.s;
        alu.a = testsimple.alua;
        alu.b = testsimple.alub;
        alu.alufn = testsimple.alualufn;
        gameend = testsimple.gameend;
        
        motherposled.position = testsimple.motherpos;
        billyposled.position = testsimple.billypos;
        seven_seg_a.char = testsimple.a_out;
        seven_seg_b.char = testsimple.b_out;
        seven_seg_c.char = testsimple.c_out;
        seven_seg_d.char = testsimple.d_out;
        
        operator1led.opcode = testsimple.operator_sig;   
        equalled = 1; 
        
        if (gameend == 1){
          state.d = state.IDLE;
        }
        
      state.TESTHARD:
      
        testhard.buttona = button_cond.buttonaout;
        testhard.buttonb = button_cond.buttonbout;
        testhard.buttonc = button_cond.buttoncout;
        testhard.buttonadd = button_cond.buttonaddout;
        testhard.buttonsub = button_cond.buttonsubout;
        testhard.buttonmul = button_cond.buttonmulout;
        testhard.buttondiv = button_cond.buttondivout;
        testhard.aluout = alu.s;
        alu.a = testhard.alua;
        alu.b = testhard.alub;
        alu.alufn = testhard.alualufn;
        
        gameend = testhard.gameend;
        motherposled.position = testhard.motherpos;
        billyposled.position = testhard.billypos;
        seven_seg_a.char = testhard.a_out;
        seven_seg_b.char = testhard.b_out;
        seven_seg_c.char = testhard.c_out;
        seven_seg_d.char = testhard.d_out;
        operator1led.opcode = testhard.operator1_out;
        operator2led.opcode = testhard.operator2_out;
        equalled = 1;
                
        if (gameend == 1){
          state.d = state.IDLE;
        }
        
        

  }
  
  
}
}