module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
        
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig alufn[6];
  sig a[16];
  sig b[16];
  
  alu alu;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    edge_detector button4press(#RISE(1),#FALL(0));
    edge_detector button1press(#RISE(1),#FALL(0));
    button_conditioner button4_cond(.in(io_button[4]));
    button_conditioner button1_cond(.in(io_button[1]));
    .rst(rst){
      alufsmtester tester;
      fsm state = {MANUAL,RESULT,AUTO};
      multi_seven_seg seg;
      dff mem_a[16];
      dff mem_b[16];
      dff mem_alufn[6];
    }
    
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    a = 16b0; // default value of A
    b = 16b0; // default value of B
    alufn = io_dip[0][5:0];
    
    // Assigning inputs for the alu
    alu.alufn = mem_alufn.q;
    alu.a = mem_a.q;
    alu.b = mem_b.q;
    
    tester.io_button = 5d0; 
    tester.io_dip = {8d0, 8d0, 8d0};    
    
    seg.values = {5d20, 5d20, 5d20, 5d20};
    io_seg = ~seg.seg; 
    io_sel = ~seg.sel; 
    io_led = io_dip;
    
    button4press.in = button4_cond.out;
    button1press.in = button1_cond.out;
    
    case (state.q){
    
      state.MANUAL: // Input value of A and B
        if (!io_dip[0][6]){ // Awaits for input of A
          a[7:0] = io_dip[1]; // Assigns the value of A to the dip switches
          a[15:8] = io_dip[2];
          if (io_button[1]){mem_a.d = a;} // Stores the value of A using a d flip flop
          if (mem_a.q == a){seg.values = {5d18, 5d20, 5d20, 5d11};} // -A; indicates if the stored value is the same as the dip switches 
          else{seg.values = {5d20, 5d20, 5d20, 5d11};} // A; indicates whether the current input is A or B
          }
        else { // Awaits for input of B
          b[7:0] = io_dip[1]; // Assigns the value of B to the dip switches
          b[15:8] = io_dip[2];
          if (io_button[1]){mem_b.d = b;} // Stores the value of B using a d flip flop
          if (mem_b.q == b){seg.values = {5d18, 5d20, 5d20, 5d17};}// -b; indicates if the stored value is the same as the dip switches 
          else{seg.values = {5d20, 5d20, 5d20, 5d17};} // b; indicates whether the current input is A or B
          }
        if (button4press.out){
          alufn = io_dip[0][5:0]; // Assigns the value of ALUFN to the dip switches
          mem_alufn.d = alufn; // Stores the value of ALUFN using a d flip flop
          state.d = state.RESULT;
          }
        if (io_button[2] & io_dip[0][7]){state.d = state.AUTO;}
      
      state.RESULT: // Displays the result
        seg.values = {5d20, 5d20, 5d20, 5d20};
        io_led[0] = 8d0;
        io_led[1] = alu.s[7:0]; // Displays the output of the alu using the led
        io_led[2] = alu.s[15:8];
        if (mem_alufn.q[5:4] == b00){ // If the alu is using the adder module, values of z, v and n will be shown
          io_led[0][7] = alu.z;
          io_led[0][6] = alu.v;
          io_led[0][5] = alu.n;
        }
        else{
          io_led[0][7:5] = 3d0;
        }
        if (button4press.out){state.d = state.MANUAL;}
        if (io_button[2] & io_dip[0][7]){state.d = state.AUTO;}
        
      state.AUTO: // Auto Test Using FSM
        io_led = tester.io_led;
        io_sel = tester.io_sel;
        io_seg = tester.io_seg;
        tester.io_button = io_button;
        tester.io_dip = io_dip;
        tester.io_button[1] = button1press.out;
        if (io_button[2] & !io_dip[0][7]){state.d = state.MANUAL;}
    
    }
    
  }
}