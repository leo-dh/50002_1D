module alufsmtester (
    input clk,  // clock
    input rst,  // reset
    input io_button[5],
    input io_dip[3][8],
    output io_led[3][8],
    output io_seg[8],
    output io_sel[4]
  ) {
  
  sig s[16];
  
  alu alu; // instantiate 16bit alu 
  .clk(clk) {
    .rst (rst){
      fsm state = {START,BUFFER,ADD1,ADD2,SUB1,SUB2,AND,OR,XOR,A,SHL,SHR,SRA,CMPEQ,CMPLT,CMPLE,CMPERR,MUL,QUO,PASS,FAIL};
      delaycounter delay; // provides a delay of around 1.34s per state
      multi_seven_seg seg;
      dff led[2][8]; // Used to store the pass/fail status for each state
      
          }
  }
  always {
    
    s = 16b0;
    
    io_led[1:0] = led.q;
    seg.values = {5d20, 5d20, 5d20, 5d20};
    io_seg = ~seg.seg; 
    io_sel = ~seg.sel;
    
    alu.alufn = 6b0;
    alu.a = 16b0;
    alu.b = 16b0;
    
    // Test Cases
    // Cycles through all the functions available for the alu and
    // checks if the output is correct given a fixed input
    // A total of 16 states to test : 14 functions + 2 cases of overflow
    case (state.q){
      
      state.START:
        led.d = {8b0, 8b0};
        seg.values = {5d11, 5d20, 5d20, 5d20}; 
        if (io_button[1]){state.d = state.BUFFER;}
        
      state.BUFFER:
        led.d = {8b0, 8b0};
        seg.values = {5d11, 5d20, 5d20, 5d20};
        if (delay.timepassed == 1){state.d = state.ADD1;}
        
      state.ADD1: // 12345 + 456
        alu.a = 16b0011000000111001; // 12345
        alu.b = 16b0000000111001000; // 456
        alu.alufn = 6b000000; // OPCODE for ADD

        if (alu.s == 16b0011001000000001){ // 12801
          seg.values = {5d14, 5d11, 5d5, 5d5}; // PASS
          led.d[0][0] = 1; // Led remains lit if the correct output is received        
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};} // FAIL               
        if (delay.timepassed == 1){
          state.d = state.ADD2; // Proceeds to the next state
        }
        
      state.ADD2: // 32767 + 1 
        alu.a = 16b0111111111111111; // 32767
        alu.b = 16b0000000000000001; // 1
        alu.alufn = 6b000000; // OPCODE for ADD
        s = alu.s; // -32768
        if (io_dip[0][0] == 1){s = s - 1;} // Forced Error testing
        if (s == 16b1000000000000000 & alu.n == 1 & alu.v == 1){ // Checks if the output is negative and for overflow
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[0][1] = 1;                
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.SUB1;
        }
        
      state.SUB1: // 1 - 1
        alu.a = 16b0000000000000001; // 1
        alu.b = 16b0000000000000001; // 1
        alu.alufn = 6b000001; // OPCODE for SUB
        
        if (alu.s == 16b0000000000000000 & alu.z == 1){ // 0; Checks if output is 0 and whether z is giving the correct output
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[0][2] = 1;          
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.SUB2;
        }
        
      state.SUB2: // 16384 - (-16385)
        alu.a = 16b0100000000000000; // 16384
        alu.b = 16b1011111111111111; // -16385
        alu.alufn = 6b000001; // OPCODE for SUB
        
        if (alu.s == 16b1000000000000001 & alu.v == 1){ // -32767; checks if the output is correct and for overflow
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[0][3] = 1;          
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.AND;
        }
        
      state.AND:
        alu.a = 16b0100000000000000; // 16384
        alu.b = 16b1011111111111111; // -16385
        alu.alufn = 6b011000; // OPCODE for AND
        
        if (alu.s == 16b0000000000000000){ // Result in 0 for the ith bit since both inputs are not the same
          seg.values = {5d14, 5d11, 5d5, 5d5};          
          led.d[0][4] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.OR;
        }
        
      state.OR:
        alu.a = 16b0100000000000000; // 16384
        alu.b = 16b1011111111111111; // -16385
        alu.alufn = 6b011110; // OPCODE for OR
        
        if (alu.s == 16b1111111111111111){ // Result in 1 for the i-th bit if either input has a 1 for the i-th bit
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[0][5] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.XOR;
        }
        
      state.XOR:
        alu.a = 16b0100000000000001; // 16385
        alu.b = 16b1011111111111111; // -16385
        alu.alufn = 6b010110; // OPCODE for XOR
        
        if (alu.s == 16b1111111111111110){ // Result in 0 for the i-th bit if both input are a 1 for the i-th bit
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[0][6] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.A;
        }
       
      state.A:
        alu.a = 16b0100000000000000; // 16384
        alu.b = 16b1011111111111111; // -16385
        alu.alufn = 6b011010; // OPCODE for "A"
        
        if (alu.s == 16b0100000000000000){ // Returns A
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[0][7] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.SHL;
        }
        
      state.SHL:
        alu.a = 16b0100000101001000; // 16712
        alu.b = 16b11; // 3
        alu.alufn = 6b100000; // OPCODE for SHL
        
        if (alu.s == 16b0000101001000000){ // 2624; A is shifted to the left by 3 bits
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[1][0] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.SHR;
        }
        
      state.SHR:
        alu.a = 16b0100000101001000; // 16712
        alu.b = 16b11; // 3
        alu.alufn = 6b100001; // OPCODE for SHR
        
        if (alu.s == 16b0000100000101001){ // 2089; A is shifted to the right by 3 bits
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[1][1] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.SRA;
        }
        
     state.SRA:
        alu.a = 16b1100000101001000; // -16056
        alu.b = 16b110; // 6
        alu.alufn = 6b100011; // OPCODE for SRA
        
        if (alu.s == 16b1111111100000101){ // -251; A is shifted right by 6 bits with sign extension
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[1][2] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.CMPEQ;
        } 
        
      state.CMPEQ:
        alu.a = 16b110; // 6
        alu.b = 16b110; // 6
        alu.alufn = 6b110011; // OPCODE for CMPEQ
        
        if (alu.s == 16b1){ // Output will be true since both values are the same
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[1][3] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.CMPLT;
        }
        
      state.CMPLT:
        alu.a = 16b110; // 6
        alu.b = 16b110; // 6
        alu.alufn = 6b110101; // OPCODE for CMPLT
        
        if (alu.s == 16b0){ // Output will be false since b is not less than a
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[1][4] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.CMPLE;
        }
        
      state.CMPLE:
        alu.a = 16b110; // 6
        alu.b = 16b110; // 6
        alu.alufn = 6b110111; // OPCODE for CMPLE
        
        if (alu.s == 16b1){ // Output will be true since b is less than or equals to a
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[1][5] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.MUL;
        }
        
      state.MUL:
        alu.a = 16b10001010; // - 118
        alu.b = 16b10001000; // - 120
        alu.alufn = 6b000010; // OPCODE for MUL
        
        if (alu.s == 16b0011011101010000){ // 14160;
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[1][6] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          state.d = state.QUO;
        }
        
      state.QUO:
        alu.a = 16b0000000001111101; // 125
        alu.b = 16b100; // 4
        alu.alufn = 6b100010; // OPCODE for QUO
        
        if (alu.s == 16b0000000000011111){ // 31
          seg.values = {5d14, 5d11, 5d5, 5d5};
          led.d[1][7] = 1;
        }
        else{seg.values = {5d10, 5d11, 5d12, 5d13};}
        if (delay.timepassed == 1){
          if (&led.q == 1){state.d = state.PASS;} // If all the leds are lit -> all states passed
          else {state.d = state.FAIL;} // If some of the leds are not lit up -> some states failed
        }
      
      state.PASS:
        seg.values = {5d14, 5d11, 5d5, 5d5};
        led.d = {8b0, 8b0};
        if (io_button[1]){state.d = state.START;} // Resets the state machine to the start
        
      state.FAIL:
        seg.values = {5d10, 5d11, 5d12, 5d13}; 
        io_led[1:0] = ~led.q; // Whichever state that failed will be indicated by the led
        if (io_button[1]){state.d = state.START;} // Resets the state machine to the start
        
              
  }
}
}